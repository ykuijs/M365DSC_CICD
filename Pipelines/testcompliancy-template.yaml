variables:
- template: variables.yaml

resources:
  pipelines:
  - pipeline: Build MOF
    source: 'Build MOF'
    branch: main
    trigger: none

stages:
- stage: M365DSCComplianceCheck
  displayName: 'Microsoft365DSC Compliance Check'
  dependsOn: []
  jobs:
  - job: CheckCompliance
    displayName: 'Check Compliance'
    dependsOn: []
    steps:
    # Clone the Data repository
    - checkout: self
      clean: true
      fetchDepth: 0
      persistCredentials: true
      path: ./s/Data

    # Clone the CICD repository
    - checkout: M365DSC_CICD
      clean: true
      fetchDepth: 1
      persistCredentials: true
      path: ./s/CICD

    # Download the pipeline artifacts
    - download: Build MOF
      displayName: 'Download Artifact'

    # Configure the MaxEnvelopeSize of WinRM
    - task: CmdLine@2
      displayName: 'Configure WinRM'
      inputs:
        script: |
          @echo off
          call winrm invoke restore winrm/config
          call winrm quickconfig -quiet
          call winrm set winrm/config @{MaxEnvelopeSizekb="4096"} > null
          call winrm get winrm/config | find /i "MaxEnvelopeSizekb"

    # Configure WinRM/CIM memory settings
    - task: PowerShell@2
      displayName: 'Configure CIM memory settings'
      inputs:
        targetType: 'inline'
        script: |
          $quotaConfiguration = Get-CimInstance -Namespace Root -ClassName "__ProviderHostQuotaConfiguration"
          $quotaConfiguration.MemoryAllHosts = 4 * 4GB
          $quotaConfiguration.MemoryPerHost  = 3 * 4GB
          $quotaConfiguration.HandlesPerHost = 8192
          $quotaConfiguration.ThreadsPerHost = 512
          Set-CimInstance -InputObject $quotaConfiguration
        errorActionPreference: 'Stop'
        failOnStderr: true

    # Make sure all required modules are installed
    - task: PowerShell@2
      displayName: 'Prepare Agent (Install Modules)'
      inputs:
        targetType: 'filePath'
        filePath: './CICD/Scripts/DeployModules.ps1'
        arguments: '-DeployM365Prerequisites'
        errorActionPreference: 'Stop'
        failOnStderr: true
        pwsh: true

    # Make sure all Secrets/Certificates are downloaded from the KeyVault and installed
    - task: AzurePowerShell@5
      displayName: 'Download secrets'
      inputs:
        ScriptType: 'FilePath'
        ScriptPath: './CICD/Scripts/DownloadSecrets.ps1'
        ScriptArguments: '-KeyVault "${{ variables.keyVault }}"'
        azurePowerShellVersion: 'latestVersion'
        azureSubscription: '${{ variables.azureSubscription }}'
        errorActionPreference: 'Stop'
        FailOnStandardError: true

    # Check all Microsoft 365 tenants for deviations with the compiled MOF files
    - task: PowerShell@2
      displayName: 'Check configuration deviations'
      inputs:
        targetType: 'filePath'
        filePath: './CICD/Scripts/CheckDscCompliance.ps1'
        arguments: '-UseMail:$${{ variables.useMail }} -MailTenantId "${{ variables.mailTenantId }}" -MailAppId "${{ variables.mailAppId }}" -MailAppSecret "${{ variables.mailAppSecret }}" -MailFrom "${{ variables.mailFrom }}" -MailTo "${{ variables.mailTo }}" -UseTeams:$${{ variables.useTeams }} -TeamsWebhook "${{ variables.teamsWebhook }}"'
        errorActionPreference: 'Stop'
        failOnStderr: false
        workingDirectory: '$(Pipeline.Workspace)/Build MOF/DeployPackage'
      continueOnError: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifacts to Pipeline'
      condition: succeededOrFailed()
      inputs:
        targetPath: '${{ variables.buildFolderName }}/'
        artifact: 'ComplianceResults'
        publishLocation: 'pipeline'
        parallel: true
