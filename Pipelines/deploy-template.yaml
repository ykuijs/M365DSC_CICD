parameters:
- name: Environments
  type: object

variables:
- template: variables.yaml

stages:
- ${{ each env in parameters.Environments }}:
  - stage: M365DSCDeployment_${{ env.Name }}
    displayName: "'${{ env.Name }}' M365 Deployment"
    ${{ if eq(env.DependsOn, '') }}:
      dependsOn: []
    ${{ else }}:
      dependsOn: M365DSCDeployment_${{ env.DependsOn }}
    jobs:
    - deployment: Deploy_${{ env.Name }}
      displayName: "Deploy ${{ env.Name }}"
      dependsOn: []
      environment: ${{ env.Name }}
      strategy:
        runOnce:
          deploy:
            steps:
            # Clone the Data repository
            - checkout: self
              clean: true
              fetchDepth: 1
              persistCredentials: true
              path: ./s/Data

            # Clone the CICD repository
            - checkout: M365DSC_CICD
              clean: true
              fetchDepth: 1
              persistCredentials: true
              path: ./s/CICD

            # Configure the MaxEnvelopeSize of WinRM
            - task: CmdLine@2
              displayName: 'Configure WinRM'
              inputs:
                script: |
                  @echo off
                  call winrm invoke restore winrm/config
                  call winrm quickconfig -quiet
                  call winrm set winrm/config @{MaxEnvelopeSizekb="8192"} > null
                  call winrm get winrm/config | find /i "MaxEnvelopeSizekb"

            # Configure the CIM memory settings
            - task: PowerShell@2
              displayName: 'Configure CIM memory settings'
              inputs:
                targetType: 'inline'
                script: |
                  $quotaConfiguration = Get-CimInstance -Namespace Root -ClassName "__ProviderHostQuotaConfiguration"
                  $quotaConfiguration.MemoryAllHosts = 4 * 4GB
                  $quotaConfiguration.MemoryPerHost  = 3 * 4GB
                  $quotaConfiguration.HandlesPerHost = 8192
                  $quotaConfiguration.ThreadsPerHost = 512
                  Set-CimInstance -InputObject $quotaConfiguration
                errorActionPreference: 'Stop'
                failOnStderr: true
                workingDirectory: '$(Pipeline.Workspace)/M365Automation/DeployPackage'

            # Make sure all required modules are installed
            - task: AzurePowerShell@5
              displayName: 'Prepare Modules'
              inputs:
                ScriptType: 'FilePath'
                ScriptPath: './CICD/Scripts/DeployModules.ps1'
                ScriptArguments: '-DeployM365Prerequisites'
                azurePowerShellVersion: 'latestVersion'
                azureSubscription: '${{ variables.azureSubscription }}'
                errorActionPreference: 'Stop'
                FailOnStandardError: false
                pwsh: true

            # Make sure all Secrets/Certificates are downloaded from the KeyVault and installed
            - task: AzurePowerShell@5
              displayName: 'Download Secrets'
              inputs:
                ScriptType: 'FilePath'
                ScriptPath: './CICD/Scripts/DownloadSecrets.ps1'
                ScriptArguments: '-KeyVault "${{ variables.keyVault }}" -Environment "${{ env.Name }}"'
                azurePowerShellVersion: 'latestVersion'
                azureSubscription: '${{ variables.azureSubscription }}'
                errorActionPreference: 'Stop'
                FailOnStandardError: true

            # Deploy the MOF file to the Microsoft 365 tenant
            - task: PowerShell@2
              displayName: 'Deploy Configurations'
              inputs:
                targetType: 'filePath'
                filePath: '$(Pipeline.Workspace)/Build MOF/DeployPackage/Deploy.ps1'
                arguments: '-Environment "${{ env.Name }}"'
                errorActionPreference: 'Stop'
                failOnStderr: true
                workingDirectory: '$(Pipeline.Workspace)/Build MOF/DeployPackage'

            # Save the Event Logs to the Pipeline
            - task: PublishPipelineArtifact@1
              displayName: 'Save Event Logs to Pipeline'
              condition: succeededOrFailed()
              inputs:
                targetPath: '$(Pipeline.Workspace)/M365Automation/DeployPackage/Logs'
                artifact: 'Logs'
                publishLocation: 'pipeline'
                parallel: true
